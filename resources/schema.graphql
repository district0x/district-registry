scalar Date
scalar Keyword

type Query {
  district(regEntry_address: ID!): District
  searchDistricts(
    statuses: [RegEntryStatus],
    orderBy: DistrictsOrderBy,
    orderDir: OrderDir,
    first: Int,
    after: String
  ): DistrictList

  paramChange(regEntry_address: ID!): ParamChange
  searchParamChanges(key: String!,
    db: String!,
    orderBy: ParamChangesOrderBy,
    orderDir: OrderDir,
    groupBy: ParamChangesGroupBy,
    first: Int,
    after: String
  ): ParamChangeList

  param(db: String!, key: String!): Param
  params(db: String!, keys: [String!]): [Param]

  stakeHistory(regEntry_address: ID!, from: Date): [StakeHistory]
}

enum ParamChangesOrderBy {
  paramChanges_orderBy_appliedOn
}

enum ParamChangesGroupBy {
  paramChanges_groupBy_key
}

enum OrderDir {
  asc
  desc
}

enum DistrictsOrderBy {
  districts_orderBy_revealPeriodEnd
  districts_orderBy_commitPeriodEnd
  districts_orderBy_dntStaked
  districts_orderBy_totalSupply
  districts_orderBy_createdOn
}

enum RegEntryStatus {
  regEntry_status_challengePeriod
  regEntry_status_commitPeriod
  regEntry_status_revealPeriod
  regEntry_status_blacklisted
  regEntry_status_whitelisted
}

interface RegEntry {
  regEntry_address: ID
  regEntry_version: Int
  regEntry_status: RegEntryStatus
  regEntry_creator: String
  regEntry_deposit: Float
  regEntry_createdOn: Date
  regEntry_challengePeriodEnd: Date
  regEntry_challenges: [Challenge]
}

type Challenge {
  regEntry_address: ID
  challenge_index: ID
  challenge_challenger: String
  challenge_comment: String
  challenge_createdOn: Date
  challenge_rewardPool: Float
  challenge_commitPeriodEnd: Date
  challenge_revealPeriodEnd: Date
  challenge_votesInclude: Float
  challenge_votesExclude: Float
  challenge_votesIncludeFromStaking: Float
  challenge_challengerRewardClaimedOn: Date
  challenge_creatorRewardClaimedOn: Date
  challenge_winningVoteOption: VoteOption
  challenge_vote(voter: ID): Vote
}

enum VoteOption {
  voteOption_neither
  voteOption_include
  voteOption_exclude
}

type Vote {
  regEntry_address: ID
  challenge_index: ID
  vote_voter: ID
  vote_secretHash: String
  vote_option: VoteOption
  vote_amount: Float
  vote_revealedOn: Date
  vote_claimedRewardOn: Date
  vote_reclaimedVotesOn: Date
  vote_reward: Float
  vote_amountFromStaking: Float
}

type District implements RegEntry {
  regEntry_address: ID
  regEntry_version: Int
  regEntry_status: RegEntryStatus
  regEntry_creator: String
  regEntry_deposit: Float
  regEntry_createdOn: Date
  regEntry_challengePeriodEnd: Date
  regEntry_challenges: [Challenge]

  district_metaHash: String
  district_name: String
  district_description: String
  district_url: String
  district_githubUrl: String
  district_logoImageHash: String
  district_backgroundImageHash: String
  district_stakeBank: String
  district_facebookUrl: String
  district_twitterUrl: String
  district_ensName: String

  district_dntStaked: Float
  district_totalSupply: Float
  district_dntStakedFor(staker: ID): Float
  district_balanceOf(staker: ID): Float
}

type DistrictList {
  items: [District]
  totalCount: Int
  endCursor: String
  hasNextPage: Boolean
}

type ParamChange implements RegEntry {
  regEntry_address: ID
  regEntry_version: Int
  regEntry_status: RegEntryStatus
  regEntry_creator: String
  regEntry_deposit: Float
  regEntry_createdOn: Date
  regEntry_challengePeriodEnd: Date
  regEntry_challenges: [Challenge]

  paramChange_db: String
  paramChange_key: String
  paramChange_value: Float
  paramChange_originalValue: Float
  paramChange_appliedOn: Date
}

type ParamChangeList {
  items: [ParamChange]
  totalCount: Int
  endCursor: ID
  hasNextPage: Boolean
}

type Param {
  param_db: ID
  param_key: ID
  param_value: Float
}

type StakeHistory {
  regEntry_address: ID
  stakeHistory_stakeId: ID
  stakeHistory_staker: String
  stakeHistory_stakedOn: Date
  stakeHistory_dntTotalStaked: Float
  stakeHistory_votingTokenTotalSupply: Float
  stakeHistory_stakerDntStaked: Float
  stakeHistory_stakerVotingTokenBalance: Float
  stakeHistory_stakedAmount: Float
  stakeHistory_unstake_: Boolean
}
